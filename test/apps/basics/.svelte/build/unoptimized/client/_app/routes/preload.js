/* src/routes/preload.svelte generated by Svelte v3.29.0 */
import {
	SvelteComponentDev,
	add_location,
	append_dev,
	children,
	claim_element,
	claim_text,
	detach_dev,
	dispatch_dev,
	element,
	init,
	insert_dev,
	noop,
	safe_not_equal,
	set_data_dev,
	text,
	validate_slots
} from "../../web_modules/svelte/internal.js";

const file = "src/routes/preload.svelte";

function create_fragment(ctx) {
	let h1;
	let t0;
	let t1;
	let t2;

	const block = {
		c: function create() {
			h1 = element("h1");
			t0 = text("bar == ");
			t1 = text(/*foo*/ ctx[0]);
			t2 = text("?");
			this.h();
		},
		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", {});
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, "bar == ");
			t1 = claim_text(h1_nodes, /*foo*/ ctx[0]);
			t2 = claim_text(h1_nodes, "?");
			h1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h1, file, 14, 0, 223);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h1, anchor);
			append_dev(h1, t0);
			append_dev(h1, t1);
			append_dev(h1, t2);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*foo*/ 1) set_data_dev(t1, /*foo*/ ctx[0]);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(h1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function preload(pageContext) {
	if (typeof window !== "undefined") {
		window.pageContext = pageContext;
	}

	return { foo: "bar" };
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Preload", slots, []);
	let { foo } = $$props;
	const writable_props = ["foo"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Preload> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("foo" in $$props) $$invalidate(0, foo = $$props.foo);
	};

	$$self.$capture_state = () => ({ preload, foo });

	$$self.$inject_state = $$props => {
		if ("foo" in $$props) $$invalidate(0, foo = $$props.foo);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [foo];
}

class Preload extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { foo: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Preload",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*foo*/ ctx[0] === undefined && !("foo" in props)) {
			console.warn("<Preload> was created without expected prop 'foo'");
		}
	}

	get foo() {
		throw new Error("<Preload>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set foo(value) {
		throw new Error("<Preload>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Preload;
export { preload };
//# sourceMappingURL=preload.js.map
