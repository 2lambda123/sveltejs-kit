{"version":3,"file":"preload-534d5e2b.js","sources":["../../unoptimized/client/_app/routes/preload.js"],"sourcesContent":["/* src/routes/preload.svelte generated by Svelte v3.29.0 */\nimport {\n\tSvelteComponentDev,\n\tadd_location,\n\tappend_dev,\n\tchildren,\n\tclaim_element,\n\tclaim_text,\n\tdetach_dev,\n\tdispatch_dev,\n\telement,\n\tinit,\n\tinsert_dev,\n\tnoop,\n\tsafe_not_equal,\n\tset_data_dev,\n\ttext,\n\tvalidate_slots\n} from \"../../web_modules/svelte/internal.js\";\n\nconst file = \"src/routes/preload.svelte\";\n\nfunction create_fragment(ctx) {\n\tlet h1;\n\tlet t0;\n\tlet t1;\n\tlet t2;\n\n\tconst block = {\n\t\tc: function create() {\n\t\t\th1 = element(\"h1\");\n\t\t\tt0 = text(\"bar == \");\n\t\t\tt1 = text(/*foo*/ ctx[0]);\n\t\t\tt2 = text(\"?\");\n\t\t\tthis.h();\n\t\t},\n\t\tl: function claim(nodes) {\n\t\t\th1 = claim_element(nodes, \"H1\", {});\n\t\t\tvar h1_nodes = children(h1);\n\t\t\tt0 = claim_text(h1_nodes, \"bar == \");\n\t\t\tt1 = claim_text(h1_nodes, /*foo*/ ctx[0]);\n\t\t\tt2 = claim_text(h1_nodes, \"?\");\n\t\t\th1_nodes.forEach(detach_dev);\n\t\t\tthis.h();\n\t\t},\n\t\th: function hydrate() {\n\t\t\tadd_location(h1, file, 14, 0, 223);\n\t\t},\n\t\tm: function mount(target, anchor) {\n\t\t\tinsert_dev(target, h1, anchor);\n\t\t\tappend_dev(h1, t0);\n\t\t\tappend_dev(h1, t1);\n\t\t\tappend_dev(h1, t2);\n\t\t},\n\t\tp: function update(ctx, [dirty]) {\n\t\t\tif (dirty & /*foo*/ 1) set_data_dev(t1, /*foo*/ ctx[0]);\n\t\t},\n\t\ti: noop,\n\t\to: noop,\n\t\td: function destroy(detaching) {\n\t\t\tif (detaching) detach_dev(h1);\n\t\t}\n\t};\n\n\tdispatch_dev(\"SvelteRegisterBlock\", {\n\t\tblock,\n\t\tid: create_fragment.name,\n\t\ttype: \"component\",\n\t\tsource: \"\",\n\t\tctx\n\t});\n\n\treturn block;\n}\n\nfunction preload(pageContext) {\n\tif (typeof window !== \"undefined\") {\n\t\twindow.pageContext = pageContext;\n\t}\n\n\treturn { foo: \"bar\" };\n}\n\nfunction instance($$self, $$props, $$invalidate) {\n\tlet { $$slots: slots = {}, $$scope } = $$props;\n\tvalidate_slots(\"Preload\", slots, []);\n\tlet { foo } = $$props;\n\tconst writable_props = [\"foo\"];\n\n\tObject.keys($$props).forEach(key => {\n\t\tif (!~writable_props.indexOf(key) && key.slice(0, 2) !== \"$$\") console.warn(`<Preload> was created with unknown prop '${key}'`);\n\t});\n\n\t$$self.$$set = $$props => {\n\t\tif (\"foo\" in $$props) $$invalidate(0, foo = $$props.foo);\n\t};\n\n\t$$self.$capture_state = () => ({ preload, foo });\n\n\t$$self.$inject_state = $$props => {\n\t\tif (\"foo\" in $$props) $$invalidate(0, foo = $$props.foo);\n\t};\n\n\tif ($$props && \"$$inject\" in $$props) {\n\t\t$$self.$inject_state($$props.$$inject);\n\t}\n\n\treturn [foo];\n}\n\nclass Preload extends SvelteComponentDev {\n\tconstructor(options) {\n\t\tsuper(options);\n\t\tinit(this, options, instance, create_fragment, safe_not_equal, { foo: 0 });\n\n\t\tdispatch_dev(\"SvelteRegisterComponent\", {\n\t\t\tcomponent: this,\n\t\t\ttagName: \"Preload\",\n\t\t\toptions,\n\t\t\tid: create_fragment.name\n\t\t});\n\n\t\tconst { ctx } = this.$$;\n\t\tconst props = options.props || {};\n\n\t\tif (/*foo*/ ctx[0] === undefined && !(\"foo\" in props)) {\n\t\t\tconsole.warn(\"<Preload> was created without expected prop 'foo'\");\n\t\t}\n\t}\n\n\tget foo() {\n\t\tthrow new Error(\"<Preload>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'\");\n\t}\n\n\tset foo(value) {\n\t\tthrow new Error(\"<Preload>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'\");\n\t}\n}\n\nexport default Preload;\nexport { preload };\n//# sourceMappingURL=preload.js.map\n"],"names":["create_fragment","ctx","h1","t0","t1","t2","block","c","element","text","this","h","l","nodes","claim_element","h1_nodes","children","claim_text","forEach","detach_dev","add_location","m","target","anchor","insert_dev","append_dev","p","dirty","set_data_dev","i","noop","o","d","detaching","dispatch_dev","id","name","type","source","preload","pageContext","window","foo","instance","$$self","$$props","$$invalidate","$$slots","slots","$$scope","validate_slots","writable_props","Object","keys","key","indexOf","slice","console","warn","$$set","$capture_state","$inject_state","$$inject","SvelteComponentDev","[object Object]","options","super","init","safe_not_equal","component","tagName","$$","props","undefined","Error","value"],"mappings":"sJAsBA,SAASA,EAAgBC,GACxB,IAAIC,EACAC,EACAC,EACAC,EAEJ,MAAMC,EAAQ,CACbC,EAAG,WACFL,EAAKM,EAAQ,MACbL,EAAKM,EAAK,WACVL,EAAKK,EAAaR,EAAI,IACtBI,EAAKI,EAAK,KACVC,KAAKC,KAENC,EAAG,SAAeC,GACjBX,EAAKY,EAAcD,EAAO,KAAM,IAChC,IAAIE,EAAWC,EAASd,GACxBC,EAAKc,EAAWF,EAAU,WAC1BX,EAAKa,EAAWF,EAAkBd,EAAI,IACtCI,EAAKY,EAAWF,EAAU,KAC1BA,EAASG,QAAQC,GACjBT,KAAKC,KAENA,EAAG,WACFS,EAAalB,EA1BH,4BA0Ba,GAAI,EAAG,MAE/BmB,EAAG,SAAeC,EAAQC,GACzBC,EAAWF,EAAQpB,EAAIqB,GACvBE,EAAWvB,EAAIC,GACfsB,EAAWvB,EAAIE,GACfqB,EAAWvB,EAAIG,IAEhBqB,EAAG,SAAgBzB,GAAM0B,IACJ,EAAhBA,GAAmBC,EAAaxB,EAAYH,EAAI,KAErD4B,EAAGC,EACHC,EAAGD,EACHE,EAAG,SAAiBC,GACfA,GAAWd,EAAWjB,KAY5B,OARAgC,EAAa,sBAAuB,CACnC5B,MAAAA,EACA6B,GAAInC,EAAgBoC,KACpBC,KAAM,YACNC,OAAQ,GACRrC,IAAAA,IAGMK,EAGR,SAASiC,EAAQC,GAKhB,MAJsB,oBAAXC,SACVA,OAAOD,YAAcA,GAGf,CAAEE,IAAK,OAGf,SAASC,EAASC,EAAQC,EAASC,GAClC,IAAMC,QAASC,EAAQ,GAAEC,QAAEA,GAAYJ,EACvCK,EAAe,UAAWF,EAAO,IACjC,IAAIN,IAAEA,GAAQG,EACd,MAAMM,EAAiB,CAAC,OAoBxB,OAlBAC,OAAOC,KAAKR,GAAS3B,SAAQoC,KACtBH,EAAeI,QAAQD,IAA4B,OAApBA,EAAIE,MAAM,EAAG,IAAaC,QAAQC,KAAK,4CAA4CJ,SAGzHV,EAAOe,MAAQd,IACV,QAASA,GAASC,EAAa,EAAGJ,EAAMG,EAAQH,MAGrDE,EAAOgB,eAAiB,MAASrB,QAAAA,EAASG,IAAAA,IAE1CE,EAAOiB,cAAgBhB,IAClB,QAASA,GAASC,EAAa,EAAGJ,EAAMG,EAAQH,MAGjDG,GAAW,aAAcA,GAC5BD,EAAOiB,cAAchB,EAAQiB,UAGvB,CAACpB,kBAGT,cAAsBqB,EACrBC,YAAYC,GACXC,MAAMD,GACNE,EAAKzD,KAAMuD,EAAStB,EAAU3C,EAAiBoE,EAAgB,CAAE1B,IAAK,IAEtER,EAAa,0BAA2B,CACvCmC,UAAW3D,KACX4D,QAAS,UACTL,QAAAA,EACA9B,GAAInC,EAAgBoC,OAGrB,MAAMnC,IAAEA,GAAQS,KAAK6D,GACfC,EAAQP,EAAQO,OAAS,QAERC,IAAXxE,EAAI,IAAsB,QAASuE,GAC9Cf,QAAQC,KAAK,qDAIfhB,UACC,MAAM,IAAIgC,MAAM,iJAGjBhC,QAAQiC,GACP,MAAM,IAAID,MAAM"}