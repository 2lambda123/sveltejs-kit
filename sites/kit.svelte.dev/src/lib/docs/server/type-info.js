/* This file is generated by running `node scripts/extract-types.js`
   in the packages/kit directory — do not edit it */
export const modules = [
  {
    "name": "$app/environment",
    "comment": "```ts\nimport { browser, building, dev, version } from '$app/environment';\n```",
    "types": [],
    "exports": [
      {
        "name": "browser",
        "comment": "`true` if the app is running in the browser.",
        "markdown": "<div class=\"ts-block\">\n\n```dts\nconst browser: boolean;\n```\n\n</div>"
      },
      {
        "name": "building",
        "comment": "SvelteKit analyses your app during the `build` step by running it. During this process, `building` is `true`. This also applies during prerendering.",
        "markdown": "<div class=\"ts-block\">\n\n```dts\nconst building: boolean;\n```\n\n</div>"
      },
      {
        "name": "dev",
        "comment": "Whether the dev server is running. This is not guaranteed to correspond to `NODE_ENV` or `MODE`.",
        "markdown": "<div class=\"ts-block\">\n\n```dts\nconst dev: boolean;\n```\n\n</div>"
      },
      {
        "name": "version",
        "comment": "The value of `config.kit.version.name`.",
        "markdown": "<div class=\"ts-block\">\n\n```dts\nconst version: string;\n```\n\n</div>"
      }
    ]
  },
  {
    "name": "$app/forms",
    "comment": "```ts\nimport { enhance, applyAction } from '$app/forms';\n```",
    "types": [],
    "exports": [
      {
        "name": "applyAction",
        "comment": "This action updates the `form` property of the current page with the given data and updates `$page.status`.\nIn case of an error, it redirects to the nearest error page.",
        "markdown": "<div class=\"ts-block\">\n\n```dts\nfunction applyAction<\n\tSuccess extends Record<string, unknown> | undefined = Record<string, any>,\n\tInvalid extends Record<string, unknown> | undefined = Record<string, any>\n>(result: ActionResult<Success, Invalid>): Promise<void>;\n```\n\n</div>"
      },
      {
        "name": "deserialize",
        "comment": "Use this function to deserialize the response from a form submission.\nUsage:\n\n```js\nconst response = await fetch('/form?/action', { method: 'POST', body: formData });\nconst result = deserialize(await response.text());\n```",
        "markdown": "<div class=\"ts-block\">\n\n```dts\nfunction deserialize<\n\tSuccess extends Record<string, unknown> | undefined = Record<string, any>,\n\tInvalid extends Record<string, unknown> | undefined = Record<string, any>\n>(serialized: string): ActionResult<Success, Invalid>;\n```\n\n</div>"
      },
      {
        "name": "enhance",
        "comment": "This action enhances a `<form>` element that otherwise would work without JavaScript.",
        "markdown": "<div class=\"ts-block\">\n\n```dts\nfunction enhance<\n\tSuccess extends Record<string, unknown> | undefined = Record<string, any>,\n\tInvalid extends Record<string, unknown> | undefined = Record<string, any>\n>(\n\tform: HTMLFormElement,\n\t/**\n\t * Called upon submission with the given FormData and the `action` that should be triggered.\n\t * If `cancel` is called, the form will not be submitted.\n\t * You can use the abort `controller` to cancel the submission in case another one starts.\n\t * If a function is returned, that function is called with the response from the server.\n\t * If nothing is returned, the fallback will be used.\n\t *\n\t * If this function or its return value isn't set, it\n\t * - falls back to updating the `form` prop with the returned data if the action is one same page as the form\n\t * - updates `$page.status`\n\t * - resets the `<form>` element and invalidates all data in case of successful submission with no redirect response\n\t * - redirects in case of a redirect response\n\t * - redirects to the nearest error page in case of an unexpected error\n\t *\n\t * If you provide a custom function with a callback and want to use the default behavior, invoke `update` in your callback.\n\t */\n\tsubmit?: SubmitFunction<Success, Invalid>\n): { destroy(): void };\n```\n\n</div>"
      }
    ]
  },
  {
    "name": "$app/navigation",
    "comment": "```ts\nimport {\n\tafterNavigate,\n\tbeforeNavigate,\n\tdisableScrollHandling,\n\tgoto,\n\tinvalidate,\n\tinvalidateAll,\n\tprefetch,\n\tprefetchRoutes\n} from '$app/navigation';\n```",
    "types": [],
    "exports": [
      {
        "name": "afterNavigate",
        "comment": "A lifecycle function that runs the supplied `callback` when the current component mounts, and also whenever we navigate to a new URL.\n\n`afterNavigate` must be called during a component initialization. It remains active as long as the component is mounted.",
        "markdown": "<div class=\"ts-block\">\n\n```dts\nfunction afterNavigate(callback: (navigation: AfterNavigate) => void): void;\n```\n\n</div>"
      },
      {
        "name": "beforeNavigate",
        "comment": "A navigation interceptor that triggers before we navigate to a new URL, whether by clicking a link, calling `goto(...)`, or using the browser back/forward controls.\nCalling `cancel()` will prevent the navigation from completing.\n\nWhen a navigation isn't client side, `navigation.to.route.id` will be `null`.\n\n`beforeNavigate` must be called during a component initialization. It remains active as long as the component is mounted.",
        "markdown": "<div class=\"ts-block\">\n\n```dts\nfunction beforeNavigate(callback: (navigation: BeforeNavigate) => void): void;\n```\n\n</div>"
      },
      {
        "name": "disableScrollHandling",
        "comment": "If called when the page is being updated following a navigation (in `onMount` or `afterNavigate` or an action, for example), this disables SvelteKit's built-in scroll handling.\nThis is generally discouraged, since it breaks user expectations.",
        "markdown": "<div class=\"ts-block\">\n\n```dts\nfunction disableScrollHandling(): void;\n```\n\n</div>"
      },
      {
        "name": "goto",
        "comment": "Returns a Promise that resolves when SvelteKit navigates (or fails to navigate, in which case the promise rejects) to the specified `url`.",
        "markdown": "<div class=\"ts-block\">\n\n```dts\nfunction goto(\n\turl: string | URL,\n\topts?: {\n\t\t/**\n\t\t * If `true`, will replace the current `history` entry rather than creating a new one with `pushState`\n\t\t */\n\t\treplaceState?: boolean;\n\t\t/**\n\t\t * If `true`, the browser will maintain its scroll position rather than scrolling to the top of the page after navigation\n\t\t */\n\t\tnoScroll?: boolean;\n\t\t/**\n\t\t * If `true`, the currently focused element will retain focus after navigation. Otherwise, focus will be reset to the body\n\t\t */\n\t\tkeepFocus?: boolean;\n\t\t/**\n\t\t * The state of the new/updated history entry\n\t\t */\n\t\tstate?: any;\n\t\t/**\n\t\t * If `true`, all `load` functions of the page will be rerun. See https://kit.svelte.dev/docs/load#invalidation for more info on invalidation.\n\t\t */\n\t\tinvalidateAll?: boolean;\n\t}\n): Promise<void>;\n```\n\n</div>"
      },
      {
        "name": "invalidate",
        "comment": "Causes any `load` functions belonging to the currently active page to re-run if they depend on the `url` in question, via `fetch` or `depends`. Returns a `Promise` that resolves when the page is subsequently updated.\n\nIf the argument is given as a `string` or `URL`, it must resolve to the same URL that was passed to `fetch` or `depends` (including query parameters).\nTo create a custom identifier, use a string beginning with `[a-z]+:` (e.g. `custom:state`) — this is a valid URL.\n\nThe `function` argument can be used define a custom predicate. It receives the full `URL` and causes `load` to rerun if `true` is returned.\nThis can be useful if you want to invalidate based on a pattern instead of a exact match.\n\n```ts\n// Example: Match '/path' regardless of the query parameters\ninvalidate((url) => url.pathname === '/path');\n```",
        "markdown": "<div class=\"ts-block\">\n\n```dts\nfunction invalidate(url: string | URL | ((url: URL) => boolean)): Promise<void>;\n```\n\n</div>"
      },
      {
        "name": "invalidateAll",
        "comment": "Causes all `load` functions belonging to the currently active page to re-run. Returns a `Promise` that resolves when the page is subsequently updated.",
        "markdown": "<div class=\"ts-block\">\n\n```dts\nfunction invalidateAll(): Promise<void>;\n```\n\n</div>"
      },
      {
        "name": "prefetch",
        "comment": "Programmatically prefetches the given page, which means\n 1. ensuring that the code for the page is loaded, and\n 2. calling the page's load function with the appropriate options.\n\nThis is the same behaviour that SvelteKit triggers when the user taps or mouses over an `<a>` element with `data-sveltekit-prefetch`.\nIf the next navigation is to `href`, the values returned from load will be used, making navigation instantaneous.\nReturns a Promise that resolves when the prefetch is complete.",
        "markdown": "<div class=\"ts-block\">\n\n```dts\nfunction prefetch(href: string): Promise<void>;\n```\n\n</div>"
      },
      {
        "name": "prefetchRoutes",
        "comment": "Programmatically prefetches the code for routes that haven't yet been fetched.\nTypically, you might call this to speed up subsequent navigation.\n\nIf no argument is given, all routes will be fetched, otherwise you can specify routes by any matching pathname\nsuch as `/about` (to match `src/routes/about.svelte`) or `/blog/*` (to match `src/routes/blog/[slug].svelte`).\n\nUnlike prefetch, this won't call load for individual pages.\nReturns a Promise that resolves when the routes have been prefetched.",
        "markdown": "<div class=\"ts-block\">\n\n```dts\nfunction prefetchRoutes(routes?: string[]): Promise<void>;\n```\n\n</div>"
      }
    ]
  },
  {
    "name": "$app/paths",
    "comment": "```ts\nimport { base, assets } from '$app/paths';\n```",
    "types": [],
    "exports": [
      {
        "name": "assets",
        "comment": "An absolute path that matches [`config.kit.paths.assets`](https://kit.svelte.dev/docs/configuration#paths).\n\n> If a value for `config.kit.paths.assets` is specified, it will be replaced with `'/_svelte_kit_assets'` during `vite dev` or `vite preview`, since the assets don't yet live at their eventual URL.",
        "markdown": "<div class=\"ts-block\">\n\n```dts\nconst assets: `https://${string}` | `http://${string}`;\n```\n\n</div>"
      },
      {
        "name": "base",
        "comment": "A string that matches [`config.kit.paths.base`](https://kit.svelte.dev/docs/configuration#paths).\n\nExample usage: `<a href=\"{base}/your-page\">Link</a>`",
        "markdown": "<div class=\"ts-block\">\n\n```dts\nconst base: `/${string}`;\n```\n\n</div>"
      }
    ]
  },
  {
    "name": "$app/stores",
    "comment": "```ts\nimport { getStores, navigating, page, updated } from '$app/stores';\n```\n\nStores on the server are _contextual_ — they are added to the [context](https://svelte.dev/tutorial/context-api) of your root component. This means that `page` is unique to each request, rather than shared between multiple requests handled by the same server simultaneously.\n\nBecause of that, you must subscribe to the stores during component initialization (which happens automatically if you reference the store value, e.g. as `$page`, in a component) before you can use them.\n\nIn the browser, we don't need to worry about this, and stores can be accessed from anywhere. Code that will only ever run on the browser can refer to (or subscribe to) any of these stores at any time.",
    "types": [],
    "exports": [
      {
        "name": "getStores",
        "comment": "A function that returns all of the contextual stores. On the server, this must be called during component initialization.\nOnly use this if you need to defer store subscription until after the component has mounted, for some reason.",
        "markdown": "<div class=\"ts-block\">\n\n```dts\nfunction getStores(): {\n\tnavigating: typeof navigating;\n\tpage: typeof page;\n\tupdated: typeof updated;\n};\n```\n\n</div>"
      },
      {
        "name": "navigating",
        "comment": "A readable store.\nWhen navigating starts, its value is a `Navigation` object with `from`, `to`, `type` and (if `type === 'popstate'`) `delta` properties.\nWhen navigating finishes, its value reverts to `null`.",
        "markdown": "<div class=\"ts-block\">\n\n```dts\nconst navigating: Readable<Navigation | null>;\n```\n\n</div>"
      },
      {
        "name": "page",
        "comment": "A readable store whose value contains page data.",
        "markdown": "<div class=\"ts-block\">\n\n```dts\nconst page: Readable<Page>;\n```\n\n</div>"
      },
      {
        "name": "updated",
        "comment": "A readable store whose initial value is `false`. If [`version.pollInterval`](https://kit.svelte.dev/docs/configuration#version) is a non-zero value, SvelteKit will poll for new versions of the app and update the store value to `true` when it detects one. `updated.check()` will force an immediate check, regardless of polling.",
        "markdown": "<div class=\"ts-block\">\n\n```dts\nconst updated: Readable<boolean> & { check(): boolean };\n```\n\n</div>"
      }
    ]
  },
  {
    "name": "$env/dynamic/private",
    "comment": "This module provides access to runtime environment variables, as defined by the platform you're running on. For example if you're using [`adapter-node`](https://github.com/sveltejs/kit/tree/master/packages/adapter-node) (or running [`vite preview`](/docs/cli)), this is equivalent to `process.env`. This module only includes variables that _do not_ begin with [`config.kit.env.publicPrefix`](/docs/configuration#env).\n\nThis module cannot be imported into client-side code.\n\n```ts\nimport { env } from '$env/dynamic/private';\nconsole.log(env.DEPLOYMENT_SPECIFIC_VARIABLE);\n```\n\n> In `dev`, `$env/dynamic` always includes environment variables from `.env`. In `prod`, this behavior will depend on your adapter.\n",
    "exports": [],
    "types": [],
    "exempt": true
  },
  {
    "name": "$env/dynamic/public",
    "comment": "Similar to [`$env/dynamic/private`](/docs/modules#$env-dynamic-private), but only includes variables that begin with [`config.kit.env.publicPrefix`](/docs/configuration#env) (which defaults to `PUBLIC_`), and can therefore safely be exposed to client-side code.\n\nNote that public dynamic environment variables must all be sent from the server to the client, causing larger network requests — when possible, use `$env/static/public` instead.\n\n```ts\nimport { env } from '$env/dynamic/public';\nconsole.log(env.PUBLIC_DEPLOYMENT_SPECIFIC_VARIABLE);\n```\n",
    "exports": [],
    "types": [],
    "exempt": true
  },
  {
    "name": "$env/static/private",
    "comment": "Environment variables [loaded by Vite](https://vitejs.dev/guide/env-and-mode.html#env-files) from `.env` files and `process.env`. Like [`$env/dynamic/private`](/docs/modules#$env-dynamic-private), this module cannot be imported into client-side code. This module only includes variables that _do not_ begin with [`config.kit.env.publicPrefix`](/docs/configuration#env).\n\n_Unlike_ [`$env/dynamic/private`](/docs/modules#$env-dynamic-private), the values exported from this module are statically injected into your bundle at build time, enabling optimisations like dead code elimination.\n\n```ts\nimport { API_KEY } from '$env/static/private';\n```\n\nNote that all environment variables referenced in your code should be declared (for example in an `.env` file), even if they don't have a value until the app is deployed:\n\n```\nMY_FEATURE_FLAG=\"\"\n```\n\nYou can override `.env` values from the command line like so:\n\n```bash\nMY_FEATURE_FLAG=\"enabled\" npm run dev\n```\n",
    "exports": [],
    "types": [],
    "exempt": true
  },
  {
    "name": "$env/static/public",
    "comment": "Similar to [`$env/static/private`](/docs/modules#$env-static-private), except that it only includes environment variables that begin with [`config.kit.env.publicPrefix`](/docs/configuration#env) (which defaults to `PUBLIC_`), and can therefore safely be exposed to client-side code.\n\nValues are replaced statically at build time.\n\n```ts\nimport { PUBLIC_BASE_URL } from '$env/static/public';\n```\n",
    "exports": [],
    "types": [],
    "exempt": true
  },
  {
    "name": "$lib",
    "comment": "This is a simple alias to `src/lib`, or whatever directory is specified as [`config.kit.files.lib`](/docs/configuration#files). It allows you to access common components and utility modules without `../../../../` nonsense.\n\n#### `$lib/server`\n\nA subdirectory of `$lib`. SvelteKit will prevent you from importing any modules in `$lib/server` into client-side code. See [server-only modules](/docs/server-only-modules).\n",
    "exports": [],
    "types": [],
    "exempt": true
  },
  {
    "name": "$service-worker",
    "comment": "```ts\nimport { build, files, prerendered, version } from '$service-worker';\n```\n\nThis module is only available to [service workers](/docs/service-workers).",
    "types": [],
    "exports": [
      {
        "name": "build",
        "comment": "An array of URL strings representing the files generated by Vite, suitable for caching with `cache.addAll(build)`.\nDuring development, this is be an empty array.",
        "markdown": "<div class=\"ts-block\">\n\n```dts\nconst build: string[];\n```\n\n</div>"
      },
      {
        "name": "files",
        "comment": "An array of URL strings representing the files in your static directory, or whatever directory is specified by `config.kit.files.assets`. You can customize which files are included from `static` directory using [`config.kit.serviceWorker.files`](https://kit.svelte.dev/docs/configuration)",
        "markdown": "<div class=\"ts-block\">\n\n```dts\nconst files: string[];\n```\n\n</div>"
      },
      {
        "name": "prerendered",
        "comment": "An array of pathnames corresponding to prerendered pages and endpoints.\nDuring development, this is be an empty array.",
        "markdown": "<div class=\"ts-block\">\n\n```dts\nconst prerendered: string[];\n```\n\n</div>"
      },
      {
        "name": "version",
        "comment": "See [`config.kit.version`](https://kit.svelte.dev/docs/configuration#version). It's useful for generating unique cache names inside your service worker, so that a later deployment of your app can invalidate old caches.",
        "markdown": "<div class=\"ts-block\">\n\n```dts\nconst version: string;\n```\n\n</div>"
      }
    ]
  },
  {
    "name": "@sveltejs/kit",
    "comment": "The following can be imported from `@sveltejs/kit`:",
    "types": [
      {
        "name": "Action",
        "comment": "Shape of a form action method that is part of `export const actions = {..}` in `+page.server.js`.\nSee [form actions](https://kit-svelte-d4b3r0pff-svelte.vercel.app/docs/form-actions) for more information.",
        "markdown": "<div class=\"ts-block\">\n\n```dts\ninterface Action<\n\tParams extends Partial<Record<string, string>> = Partial<\n\t\tRecord<string, string>\n\t>,\n\tOutputData extends Record<string, any> | void = Record<string, any> | void,\n\tRouteId extends string | null = string | null\n> {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\n(event: RequestEvent<Params, RouteId>): MaybePromise<OutputData>;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div></div>"
      },
      {
        "name": "ActionResult",
        "comment": "When calling a form action via fetch, the response will be one of these shapes.",
        "markdown": "<div class=\"ts-block\">\n\n```dts\ntype ActionResult<\n\tSuccess extends Record<string, unknown> | undefined = Record<string, any>,\n\tInvalid extends Record<string, unknown> | undefined = Record<string, any>\n> =\n\t| { type: 'success'; status: number; data?: Success }\n\t| { type: 'invalid'; status: number; data?: Invalid }\n\t| { type: 'redirect'; status: number; location: string }\n\t| { type: 'error'; error: any };\n```\n\n</div>"
      },
      {
        "name": "Actions",
        "comment": "Shape of the `export const actions = {..}` object in `+page.server.js`.\nSee [form actions](https://kit-svelte-d4b3r0pff-svelte.vercel.app/docs/form-actions) for more information.",
        "markdown": "<div class=\"ts-block\">\n\n```dts\ntype Actions<\n\tParams extends Partial<Record<string, string>> = Partial<\n\t\tRecord<string, string>\n\t>,\n\tOutputData extends Record<string, any> | void = Record<string, any> | void,\n\tRouteId extends string | null = string | null\n> = Record<string, Action<Params, OutputData, RouteId>>;\n```\n\n</div>"
      },
      {
        "name": "Adapter",
        "comment": "[Adapters](https://kit.svelte.dev/docs/adapters) are responsible for taking the production build and turning it into something that can be deployed to a platform of your choosing.",
        "markdown": "<div class=\"ts-block\">\n\n```dts\ninterface Adapter {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\nname: string;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nThe name of the adapter, using for logging. Will typically correspond to the package name.\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nadapt(builder: Builder): MaybePromise<void>;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n<div class=\"ts-block-property-bullets\">\n\n- `builder` An object provided by SvelteKit that contains methods for adapting the app</div>\n\nThis function is called after SvelteKit has built your app.\n</div></div></div>"
      },
      {
        "name": "AfterNavigate",
        "comment": "The argument passed to [`afterNavigate`](https://kit.svelte.dev/docs/modules#$app-navigation-afternavigate) callbacks.",
        "markdown": "<div class=\"ts-block\">\n\n```dts\ninterface AfterNavigate extends Navigation {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\ntype: Omit<NavigationType, 'leave'>;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nThe type of navigation:\n- `enter`: The app has hydrated\n- `link`: Navigation was triggered by a link click\n- `goto`: Navigation was triggered by a `goto(...)` call or a redirect\n- `popstate`: Navigation was triggered by back/forward navigation\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nwillUnload: false;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nSince `afterNavigate` is called after a navigation completes, it will never be called with a navigation that unloads the page.\n</div></div></div>"
      },
      {
        "name": "AwaitedActions",
        "comment": "",
        "markdown": "<div class=\"ts-block\">\n\n```dts\ntype AwaitedActions<T extends Record<string, (...args: any) => any>> = {\n\t[Key in keyof T]: OptionalUnion<\n\t\tUnpackValidationError<Awaited<ReturnType<T[Key]>>>\n\t>;\n}[keyof T];\n```\n\n</div>"
      },
      {
        "name": "AwaitedProperties",
        "comment": "",
        "markdown": "<div class=\"ts-block\">\n\n```dts\ntype AwaitedProperties<input extends Record<string, any> | void> =\n\tAwaitedPropertiesUnion<input> extends Record<string, any>\n\t\t? OptionalUnion<AwaitedPropertiesUnion<input>>\n\t\t: AwaitedPropertiesUnion<input>;\n```\n\n</div>"
      },
      {
        "name": "BeforeNavigate",
        "comment": "The argument passed to [`beforeNavigate`](https://kit.svelte.dev/docs/modules#$app-navigation-beforenavigate) callbacks.",
        "markdown": "<div class=\"ts-block\">\n\n```dts\ninterface BeforeNavigate extends Navigation {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\ncancel(): void;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nCall this to prevent the navigation from starting.\n</div></div></div>"
      },
      {
        "name": "Builder",
        "comment": "This object is passed to the `adapt` function of adapters.\nIt contains various methods and properties that are useful for adapting the app.",
        "markdown": "<div class=\"ts-block\">\n\n```dts\ninterface Builder {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\nlog: Logger;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nPrint messages to the console. `log.info` and `log.minor` are silent unless Vite's `logLevel` is `info`.\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nrimraf(dir: string): void;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nRemove `dir` and all its contents.\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nmkdirp(dir: string): void;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nCreate `dir` and any required parent directories.\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nconfig: ValidatedConfig;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nThe fully resolved `svelte.config.js`.\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nprerendered: Prerendered;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nInformation about prerendered pages and assets, if any.\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\ncreateEntries(fn: (route: RouteDefinition) => AdapterEntry): Promise<void>;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n<div class=\"ts-block-property-bullets\">\n\n- `fn` A function that groups a set of routes into an entry point</div>\n\nCreate separate functions that map to one or more routes of your app.\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\ngenerateManifest(opts: { relativePath: string }): string;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n<div class=\"ts-block-property-bullets\">\n\n- `opts` a relative path to the base directory of the app and optionally in which format (esm or cjs) the manifest should be generated</div>\n\nGenerate a server-side manifest to initialise the SvelteKit [server](https://kit.svelte.dev/docs/types#sveltejs-kit-server) with.\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\ngetBuildDirectory(name: string): string;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n<div class=\"ts-block-property-bullets\">\n\n- `name` path to the file, relative to the build directory</div>\n\nResolve a path to the `name` directory inside `outDir`, e.g. `/path/to/.svelte-kit/my-adapter`.\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\ngetClientDirectory(): string;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nGet the fully resolved path to the directory containing client-side assets, including the contents of your `static` directory.\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\ngetServerDirectory(): string;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nGet the fully resolved path to the directory containing server-side code.\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\ngetAppPath(): string;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nGet the application path including any configured `base` path, e.g. `/my-base-path/_app`.\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nwriteClient(dest: string): string[];\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n<div class=\"ts-block-property-bullets\">\n\n- `dest` the destination folder\n- <span class=\"tag\">returns</span> an array of files written to `dest`</div>\n\nWrite client assets to `dest`.\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nwritePrerendered(\n\tdest: string,\n\topts?: {\n\t\tfallback?: string;\n\t}\n): string[];\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n<div class=\"ts-block-property-bullets\">\n\n- `dest` the destination folder\n- `opts.fallback` the name of a file for fallback responses, like `200.html` or `404.html` depending on where the app is deployed\n- <span class=\"tag\">returns</span> an array of files written to `dest`</div>\n\nWrite prerendered files to `dest`.\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nwriteServer(dest: string): string[];\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n<div class=\"ts-block-property-bullets\">\n\n- `dest` the destination folder\n- <span class=\"tag\">returns</span> an array of files written to `dest`</div>\n\nWrite server-side code to `dest`.\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\ncopy(\n\tfrom: string,\n\tto: string,\n\topts?: {\n\t\tfilter?(basename: string): boolean;\n\t\treplace?: Record<string, string>;\n\t}\n): string[];\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n<div class=\"ts-block-property-bullets\">\n\n- `from` the source file or directory\n- `to` the destination file or directory\n- `opts.filter` a function to determine whether a file or directory should be copied\n- `opts.replace` a map of strings to replace\n- <span class=\"tag\">returns</span> an array of files that were copied</div>\n\nCopy a file or directory.\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\ncompress(directory: string): Promise<void>;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n<div class=\"ts-block-property-bullets\">\n\n- `directory` The directory containing the files to be compressed</div>\n\nCompress files in `directory` with gzip and brotli, where appropriate. Generates `.gz` and `.br` files alongside the originals.\n</div></div></div>"
      },
      {
        "name": "Config",
        "comment": "",
        "markdown": "<div class=\"ts-block\">\n\n```dts\ninterface Config {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\ncompilerOptions?: CompileOptions;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `{}`</div>\n\nOptions passed to [`svelte.compile`](https://svelte.dev/docs#compile-time-svelte-compile).\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nextensions?: string[];\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `[\".svelte\"]`</div>\n\nList of file extensions that should be treated as Svelte files.\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nkit?: KitConfig;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nSvelteKit options\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\npackage?: {\n\tsource?: string;\n\tdir?: string;\n\temitTypes?: boolean;\n\texports?(filepath: string): boolean;\n\tfiles?(filepath: string): boolean;\n};\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n[`@sveltejs/package`](/docs/packaging) options.\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\npreprocess?: any;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nPreprocessor options, if any. Preprocessing can alternatively also be done through Vite's preprocessor capabilities.\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\n[key: string]: any;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nAny additional options required by tooling that integrates with Svelte.\n</div></div></div>"
      },
      {
        "name": "Cookies",
        "comment": "",
        "markdown": "<div class=\"ts-block\">\n\n```dts\ninterface Cookies {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\nget(name: string, opts?: import('cookie').CookieParseOptions): string | undefined;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n<div class=\"ts-block-property-bullets\">\n\n- `name` the name of the cookie\n- `opts` the options, passed directly to `cookie.parse`. See documentation [here](https://github.com/jshttp/cookie#cookieparsestr-options)</div>\n\nGets a cookie that was previously set with `cookies.set`, or from the request headers.\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nset(name: string, value: string, opts?: import('cookie').CookieSerializeOptions): void;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n<div class=\"ts-block-property-bullets\">\n\n- `name` the name of the cookie\n- `value` the cookie value\n- `opts` the options, passed directory to `cookie.serialize`. See documentation [here](https://github.com/jshttp/cookie#cookieserializename-value-options)</div>\n\nSets a cookie. This will add a `set-cookie` header to the response, but also make the cookie available via `cookies.get` during the current request.\n\nThe `httpOnly` and `secure` options are `true` by default (except on http://localhost, where `secure` is `false`), and must be explicitly disabled if you want cookies to be readable by client-side JavaScript and/or transmitted over HTTP. The `sameSite` option defaults to `lax`.\n\nBy default, the `path` of a cookie is the 'directory' of the current pathname. In most cases you should explicitly set `path: '/'` to make the cookie available throughout your app.\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\ndelete(name: string, opts?: import('cookie').CookieSerializeOptions): void;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n<div class=\"ts-block-property-bullets\">\n\n- `name` the name of the cookie\n- `opts` the options, passed directory to `cookie.serialize`. The `path` must match the path of the cookie you want to delete. See documentation [here](https://github.com/jshttp/cookie#cookieserializename-value-options)</div>\n\nDeletes a cookie by setting its value to an empty string and setting the expiry date in the past.\n\nBy default, the `path` of a cookie is the 'directory' of the current pathname. In most cases you should explicitly set `path: '/'` to make the cookie available throughout your app.\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nserialize(name: string, value: string, opts?: import('cookie').CookieSerializeOptions): string;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n<div class=\"ts-block-property-bullets\">\n\n- `name` the name of the cookie\n- `value` the cookie value\n- `opts` the options, passed directory to `cookie.serialize`. See documentation [here](https://github.com/jshttp/cookie#cookieserializename-value-options)</div>\n\nSerialize a cookie name-value pair into a `Set-Cookie` header string, but don't apply it to the response.\n\nThe `httpOnly` and `secure` options are `true` by default (except on http://localhost, where `secure` is `false`), and must be explicitly disabled if you want cookies to be readable by client-side JavaScript and/or transmitted over HTTP. The `sameSite` option defaults to `lax`.\n\nBy default, the `path` of a cookie is the current pathname. In most cases you should explicitly set `path: '/'` to make the cookie available throughout your app.\n</div></div></div>"
      },
      {
        "name": "Handle",
        "comment": "The [`handle`](https://kit.svelte.dev/docs/hooks#server-hooks-handle) hook runs every time the SvelteKit server receives a [request](https://kit.svelte.dev/docs/web-standards#fetch-apis-request) and\ndetermines the [response](https://kit.svelte.dev/docs/web-standards#fetch-apis-response).\nIt receives an `event` object representing the request and a function called `resolve`, which renders the route and generates a `Response`.\nThis allows you to modify response headers or bodies, or bypass SvelteKit entirely (for implementing routes programmatically, for example).",
        "markdown": "<div class=\"ts-block\">\n\n```dts\ninterface Handle {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\n(input: {\n\tevent: RequestEvent;\n\tresolve(event: RequestEvent, opts?: ResolveOptions): MaybePromise<Response>;\n}): MaybePromise<Response>;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div></div>"
      },
      {
        "name": "HandleClientError",
        "comment": "The client-side [`handleError`](https://kit.svelte.dev/docs/hooks#shared-hooks-handleerror) hook runs when an unexpected error is thrown while navigating.\n\nIf an unexpected error is thrown during loading or the following render, this function will be called with the error and the event.\nMake sure that this function _never_ throws an error.",
        "markdown": "<div class=\"ts-block\">\n\n```dts\ninterface HandleClientError {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\n(input: { error: unknown; event: NavigationEvent }): MaybePromise<void | App.Error>;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div></div>"
      },
      {
        "name": "HandleFetch",
        "comment": "The [`handleFetch`](https://kit.svelte.dev/docs/hooks#server-hooks-handlefetch) hook allows you to modify (or replace) a `fetch` request that happens inside a `load` function that runs on the server (or during pre-rendering)",
        "markdown": "<div class=\"ts-block\">\n\n```dts\ninterface HandleFetch {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\n(input: { event: RequestEvent; request: Request; fetch: typeof fetch }): MaybePromise<Response>;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div></div>"
      },
      {
        "name": "HandleServerError",
        "comment": "The server-side [`handleError`](https://kit.svelte.dev/docs/hooks#shared-hooks-handleerror) hook runs when an unexpected error is thrown while responding to a request.\n\nIf an unexpected error is thrown during loading or rendering, this function will be called with the error and the event.\nMake sure that this function _never_ throws an error.",
        "markdown": "<div class=\"ts-block\">\n\n```dts\ninterface HandleServerError {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\n(input: { error: unknown; event: RequestEvent }): MaybePromise<void | App.Error>;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div></div>"
      },
      {
        "name": "HttpError",
        "comment": "The object returned by the [`error`](https://kit.svelte.dev/docs/modules#sveltejs-kit-error) function.",
        "markdown": "<div class=\"ts-block\">\n\n```dts\ninterface HttpError {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\nstatus: number;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nThe [HTTP status code](https://httpstatusdogs.com), in the range 400-599\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nbody: App.Error;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nThe content of the error.\n</div></div></div>"
      },
      {
        "name": "KitConfig",
        "comment": "",
        "markdown": "<div class=\"ts-block\">\n\n```dts\ninterface KitConfig {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\nadapter?: Adapter;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `undefined`</div>\n\nYour [adapter](https://kit.svelte.dev/docs/adapters) is run when executing `vite build`. It determines how the output is converted for different platforms.\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nalias?: Record<string, string>;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `{}`</div>\n\nAn object containing zero or more aliases used to replace values in `import` statements. These aliases are automatically passed to Vite and TypeScript.\n\n```js\n// @errors: 7031\n/// file: svelte.config.js\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n\tkit: {\n\t\talias: {\n\t\t\t// this will match a file\n\t\t\t'my-file': 'path/to/my-file.js',\n\n\t\t\t// this will match a directory and its contents\n\t\t\t// (`my-directory/x` resolves to `path/to/my-directory/x`)\n\t\t\t'my-directory': 'path/to/my-directory',\n\n\t\t\t// an alias ending /* will only match\n\t\t\t// the contents of a directory, not the directory itself\n\t\t\t'my-directory/*': 'path/to/my-directory/*'\n\t\t}\n\t}\n};\n```\n\n> The built-in `$lib` alias is controlled by `config.kit.files.lib` as it is used for packaging.\n\n> You will need to run `npm run dev` to have SvelteKit automatically generate the required alias configuration in `jsconfig.json` or `tsconfig.json`.\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nappDir?: string;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `\"_app\"`</div>\n\nThe directory relative to `paths.assets` where the built JS and CSS (and imported assets) are served from. (The filenames therein contain content-based hashes, meaning they can be cached indefinitely). Must not start or end with `/`.\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\ncsp?: {/*…*/}\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n[Content Security Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy) configuration. CSP helps to protect your users against cross-site scripting (XSS) attacks, by limiting the places resources can be loaded from. For example, a configuration like this...\n\n```js\n// @errors: 7031\n/// file: svelte.config.js\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n\tkit: {\n\t\tcsp: {\n\t\t\tdirectives: {\n\t\t\t\t'script-src': ['self']\n\t\t\t},\n\t\t\treportOnly: {\n\t\t\t\t'script-src': ['self']\n\t\t\t}\n\t\t}\n\t}\n};\n\nexport default config;\n```\n\n...would prevent scripts loading from external sites. SvelteKit will augment the specified directives with nonces or hashes (depending on `mode`) for any inline styles and scripts it generates.\n\nTo add a nonce for scripts and links manually included in `src/app.html`, you may use the placeholder `%sveltekit.nonce%` (for example `<script nonce=\"%sveltekit.nonce%\">`).\n\nWhen pages are prerendered, the CSP header is added via a `<meta http-equiv>` tag (note that in this case, `frame-ancestors`, `report-uri` and `sandbox` directives will be ignored).\n\n> When `mode` is `'auto'`, SvelteKit will use nonces for dynamically rendered pages and hashes for prerendered pages. Using nonces with prerendered pages is insecure and therefore forbidden.\n\n> Note that most [Svelte transitions](https://svelte.dev/tutorial/transition) work by creating an inline `<style>` element. If you use these in your app, you must either leave the `style-src` directive unspecified or add `unsafe-inline`.\n\n<div class=\"ts-block-property-children\"><div class=\"ts-block-property\">\n\n```dts\nmode?: 'hash' | 'nonce' | 'auto';\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nWhether to use hashes or nonces to restrict `<script>` and `<style>` elements. `'auto'` will use hashes for prerendered pages, and nonces for dynamically rendered pages.\n</div></div>\n<div class=\"ts-block-property\">\n\n```dts\ndirectives?: CspDirectives;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nDirectives that will be added to `Content-Security-Policy` headers.\n</div></div>\n<div class=\"ts-block-property\">\n\n```dts\nreportOnly?: CspDirectives;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nDirectives that will be added to `Content-Security-Policy-Report-Only` headers.\n</div></div></div>\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\ncsrf?: {/*…*/}\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nProtection against [cross-site request forgery](https://owasp.org/www-community/attacks/csrf) attacks.\n\n<div class=\"ts-block-property-children\"><div class=\"ts-block-property\">\n\n```dts\ncheckOrigin?: boolean;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `true`</div>\n\nWhether to check the incoming `origin` header for `POST` form submissions and verify that it matches the server's origin.\n\nTo allow people to make `POST` form submissions to your app from other origins, you will need to disable this option. Be careful!\n</div></div></div>\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nenv?: {/*…*/}\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nEnvironment variable configuration\n\n<div class=\"ts-block-property-children\"><div class=\"ts-block-property\">\n\n```dts\ndir?: string;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `\".\"`</div>\n\nThe directory to search for `.env` files.\n</div></div>\n<div class=\"ts-block-property\">\n\n```dts\npublicPrefix?: string;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `\"PUBLIC_\"`</div>\n\nA prefix that signals that an environment variable is safe to expose to client-side code. See [`$env/static/public`](/docs/modules#$env-static-public) and [`$env/dynamic/public`](/docs/modules#$env-dynamic-public). Note that Vite's [`envPrefix`](https://vitejs.dev/config/shared-options.html#envprefix) must be set separately if you are using Vite's environment variable handling - though use of that feature should generally be unnecessary.\n</div></div></div>\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nfiles?: {/*…*/}\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nWhere to find various files within your project.\n\n<div class=\"ts-block-property-children\"><div class=\"ts-block-property\">\n\n```dts\nassets?: string;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `\"static\"`</div>\n\na place to put static files that should have stable URLs and undergo no processing, such as `favicon.ico` or `manifest.json`\n</div></div>\n<div class=\"ts-block-property\">\n\n```dts\nhooks?: {/*…*/}\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n\n<div class=\"ts-block-property-children\"><div class=\"ts-block-property\">\n\n```dts\nclient?: string;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `\"src/hooks.client\"`</div>\n\nThe location of your client [hooks](/docs/hooks).\n</div></div>\n<div class=\"ts-block-property\">\n\n```dts\nserver?: string;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `\"src/hooks.server\"`</div>\n\nThe location of your server [hooks](/docs/hooks).\n</div></div></div>\n</div></div>\n<div class=\"ts-block-property\">\n\n```dts\nlib?: string;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `\"src/lib\"`</div>\n\nyour app's internal library, accessible throughout the codebase as `$lib`\n</div></div>\n<div class=\"ts-block-property\">\n\n```dts\nparams?: string;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `\"src/params\"`</div>\n\na directory containing [parameter matchers](https://kit.svelte.dev/docs/advanced-routing#matching)\n</div></div>\n<div class=\"ts-block-property\">\n\n```dts\nroutes?: string;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `\"src/routes\"`</div>\n\nthe files that define the structure of your app (see [Routing](https://kit.svelte.dev/docs/routing))\n</div></div>\n<div class=\"ts-block-property\">\n\n```dts\nserviceWorker?: string;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `\"src/service-worker\"`</div>\n\nthe location of your service worker's entry point (see [Service workers](https://kit.svelte.dev/docs/service-workers))\n</div></div>\n<div class=\"ts-block-property\">\n\n```dts\nappTemplate?: string;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `\"src/app.html\"`</div>\n\nthe location of the template for HTML responses\n</div></div>\n<div class=\"ts-block-property\">\n\n```dts\nerrorTemplate?: string;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `\"src/error.html\"`</div>\n\nthe location of the template for fallback error responses\n</div></div></div>\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\ninlineStyleThreshold?: number;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `0`</div>\n\nInline CSS inside a `<style>` block at the head of the HTML. This option is a number that specifies the maximum length of a CSS file to be inlined. All CSS files needed for the page and smaller than this value are merged and inlined in a `<style>` block.\n\n> This results in fewer initial requests and can improve your [First Contentful Paint](https://web.dev/first-contentful-paint) score. However, it generates larger HTML output and reduces the effectiveness of browser caches. Use it advisedly.\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nmoduleExtensions?: string[];\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `[\".js\", \".ts\"]`</div>\n\nAn array of file extensions that SvelteKit will treat as modules. Files with extensions that match neither `config.extensions` nor `config.kit.moduleExtensions` will be ignored by the router.\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\noutDir?: string;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `\".svelte-kit\"`</div>\n\nThe directory that SvelteKit writes files to during `dev` and `build`. You should exclude this directory from version control.\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\npaths?: {/*…*/}\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n\n<div class=\"ts-block-property-children\"><div class=\"ts-block-property\">\n\n```dts\nassets?: string;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `\"\"`</div>\n\nAn absolute path that your app's files are served from. This is useful if your files are served from a storage bucket of some kind.\n</div></div>\n<div class=\"ts-block-property\">\n\n```dts\nbase?: string;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `\"\"`</div>\n\nA root-relative path that must start, but not end with `/` (e.g. `/base-path`), unless it is the empty string. This specifies where your app is served from and allows the app to live on a non-root path. Note that you need to prepend all your root-relative links with the base value or they will point to the root of your domain, not your `base` (this is how the browser works). You can use [`base` from `$app/paths`](/docs/modules#$app-paths-base) for that: `<a href=\"{base}/your-page\">Link</a>`. If you find yourself writing this often, it may make sense to extract this into a reusable component.\n</div></div></div>\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nprerender?: {/*…*/}\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nSee [Prerendering](https://kit.svelte.dev/docs/page-options#prerender).\n\n<div class=\"ts-block-property-children\"><div class=\"ts-block-property\">\n\n```dts\nconcurrency?: number;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `1`</div>\n\nHow many pages can be prerendered simultaneously. JS is single-threaded, but in cases where prerendering performance is network-bound (for example loading content from a remote CMS) this can speed things up by processing other tasks while waiting on the network response.\n</div></div>\n<div class=\"ts-block-property\">\n\n```dts\ncrawl?: boolean;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `true`</div>\n\nWhether SvelteKit should find pages to prerender by following links from `entries`.\n</div></div>\n<div class=\"ts-block-property\">\n\n```dts\nentries?: Array<'*' | `/${string}`>;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `[\"*\"]`</div>\n\nAn array of pages to prerender, or start crawling from (if `crawl: true`). The `*` string includes all non-dynamic routes (i.e. pages with no `[parameters]`, because SvelteKit doesn't know what value the parameters should have).\n</div></div>\n<div class=\"ts-block-property\">\n\n```dts\nhandleHttpError?: PrerenderHttpErrorHandlerValue;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `\"fail\"`</div>\n\nHow to respond to HTTP errors encountered while prerendering the app.\n\n- `'fail'` — fail the build\n- `'ignore'` - silently ignore the failure and continue\n- `'warn'` — continue, but print a warning\n- `(details) => void` — a custom error handler that takes a `details` object with `status`, `path`, `referrer`, `referenceType` and `message` properties. If you `throw` from this function, the build will fail\n\n```js\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n\tkit: {\n\t\tprerender: {\n\t\t\thandleHttpError: ({ path, referrer, message }) => {\n\t\t\t\t// ignore deliberate link to shiny 404 page\n\t\t\t\tif (path === '/not-found' && referrer === '/blog/how-we-built-our-404-page') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// otherwise fail the build\n\t\t\t\t\tthrow new Error(message);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n```\n</div></div>\n<div class=\"ts-block-property\">\n\n```dts\nhandleMissingId?: PrerenderMissingIdHandlerValue;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `\"fail\"`</div>\n\nHow to respond to hash links from one prerendered page to another that don't correspond to an `id` on the destination page\n\n- `'fail'` — fail the build\n- `'ignore'` - silently ignore the failure and continue\n- `'warn'` — continue, but print a warning\n- `(details) => void` — a custom error handler that takes a `details` object with `path`, `id`, `referrers` and `message` properties. If you `throw` from this function, the build will fail\n</div></div>\n<div class=\"ts-block-property\">\n\n```dts\norigin?: string;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `\"http://sveltekit-prerender\"`</div>\n\nThe value of `url.origin` during prerendering; useful if it is included in rendered content.\n</div></div></div>\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nserviceWorker?: {/*…*/}\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n\n<div class=\"ts-block-property-children\"><div class=\"ts-block-property\">\n\n```dts\nregister?: boolean;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `true`</div>\n\nWhether to automatically register the service worker, if it exists.\n</div></div>\n<div class=\"ts-block-property\">\n\n```dts\nfiles?(filepath: string): boolean;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `(filename) => !/\\.DS_Store/.test(filename)`</div>\n\nDetermine which files in your `static` directory will be available in `$service-worker.files`.\n</div></div></div>\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nversion?: {/*…*/}\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nClient-side navigation can be buggy if you deploy a new version of your app while people are using it. If the code for the new page is already loaded, it may have stale content; if it isn't, the app's route manifest may point to a JavaScript file that no longer exists. SvelteKit solves this problem by falling back to traditional full-page navigation if it detects that a new version has been deployed, using the `name` specified here (which defaults to a timestamp of the build).\n\nIf you set `pollInterval` to a non-zero value, SvelteKit will poll for new versions in the background and set the value of the [`updated`](/docs/modules#$app-stores-updated) store to `true` when it detects one.\n\n<div class=\"ts-block-property-children\"><div class=\"ts-block-property\">\n\n```dts\nname?: string;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `Date.now().toString()`</div>\n\nThe current app version string.\n</div></div>\n<div class=\"ts-block-property\">\n\n```dts\npollInterval?: number;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `0`</div>\n\nThe interval in milliseconds to poll for version changes. If this is `0`, no polling occurs.\n</div></div></div>\n</div></div></div>"
      },
      {
        "name": "Load",
        "comment": "The generic form of `PageLoad` and `LayoutLoad`. You should import those from `./$types` (see [generated types](https://kit.svelte.dev/docs/types#generated-types))\nrather than using `Load` directly.",
        "markdown": "<div class=\"ts-block\">\n\n```dts\ninterface Load<\n\tParams extends Partial<Record<string, string>> = Partial<\n\t\tRecord<string, string>\n\t>,\n\tInputData extends Record<string, unknown> | null = Record<string, any> | null,\n\tParentData extends Record<string, unknown> = Record<string, any>,\n\tOutputData extends Record<string, unknown> | void = Record<\n\t\tstring,\n\t\tany\n\t> | void,\n\tRouteId extends string | null = string | null\n> {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\n(event: LoadEvent<Params, InputData, ParentData, RouteId>): MaybePromise<OutputData>;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div></div>"
      },
      {
        "name": "LoadEvent",
        "comment": "The generic form of `PageLoadEvent` and `LayoutLoadEvent`. You should import those from `./$types` (see [generated types](https://kit.svelte.dev/docs/types#generated-types))\nrather than using `LoadEvent` directly.",
        "markdown": "<div class=\"ts-block\">\n\n```dts\ninterface LoadEvent<\n\tParams extends Partial<Record<string, string>> = Partial<\n\t\tRecord<string, string>\n\t>,\n\tData extends Record<string, unknown> | null = Record<string, any> | null,\n\tParentData extends Record<string, unknown> = Record<string, any>,\n\tRouteId extends string | null = string | null\n> extends NavigationEvent<Params, RouteId> {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\nfetch: typeof fetch;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n`fetch` is equivalent to the [native `fetch` web API](https://developer.mozilla.org/en-US/docs/Web/API/fetch), with a few additional features:\n\n- it can be used to make credentialed requests on the server, as it inherits the `cookie` and `authorization` headers for the page request\n- it can make relative requests on the server (ordinarily, `fetch` requires a URL with an origin when used in a server context)\n- internal requests (e.g. for `+server.js` routes) go directly to the handler function when running on the server, without the overhead of an HTTP call\n- during server-side rendering, the response will be captured and inlined into the rendered HTML. Note that headers will _not_ be serialized, unless explicitly included via [`filterSerializedResponseHeaders`](https://kit.svelte.dev/docs/hooks#server-hooks-handle)\n- during hydration, the response will be read from the HTML, guaranteeing consistency and preventing an additional network request\n\n> Cookies will only be passed through if the target host is the same as the SvelteKit application or a more specific subdomain of it.\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\ndata: Data;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nContains the data returned by the route's server `load` function (in `+layout.server.js` or `+page.server.js`), if any.\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nsetHeaders(headers: Record<string, string>): void;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nIf you need to set headers for the response, you can do so using the this method. This is useful if you want the page to be cached, for example:\n\n```js\n// @errors: 7031\n/// file: src/routes/blog/+page.js\nexport async function load({ fetch, setHeaders }) {\n\tconst url = `https://cms.example.com/articles.json`;\n\tconst response = await fetch(url);\n\n\tsetHeaders({\n\t\tage: response.headers.get('age'),\n\t\t'cache-control': response.headers.get('cache-control')\n\t});\n\n\treturn response.json();\n}\n```\n\nSetting the same header multiple times (even in separate `load` functions) is an error — you can only set a given header once.\n\nYou cannot add a `set-cookie` header with `setHeaders` — use the [`cookies`](https://kit.svelte.dev/docs/types#sveltejs-kit-cookies) API in a server-only `load` function instead.\n\n`setHeaders` has no effect when a `load` function runs in the browser.\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nparent(): Promise<ParentData>;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n`await parent()` returns data from parent `+layout.js` `load` functions.\nImplicitly, a missing `+layout.js` is treated as a `({ data }) => data` function, meaning that it will return and forward data from parent `+layout.server.js` files.\n\nBe careful not to introduce accidental waterfalls when using `await parent()`. If for example you only want to merge parent data into the returned output, call it _after_ fetching your other data.\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\ndepends(...deps: string[]): void;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nThis function declares that the `load` function has a _dependency_ on one or more URLs or custom identifiers, which can subsequently be used with [`invalidate()`](/docs/modules#$app-navigation-invalidate) to cause `load` to rerun.\n\nMost of the time you won't need this, as `fetch` calls `depends` on your behalf — it's only necessary if you're using a custom API client that bypasses `fetch`.\n\nURLs can be absolute or relative to the page being loaded, and must be [encoded](https://developer.mozilla.org/en-US/docs/Glossary/percent-encoding).\n\nCustom identifiers have to be prefixed with one or more lowercase letters followed by a colon to conform to the [URI specification](https://www.rfc-editor.org/rfc/rfc3986.html).\n\nThe following example shows how to use `depends` to register a dependency on a custom identifier, which is `invalidate`d after a button click, making the `load` function rerun.\n\n```js\n// @errors: 7031\n/// file: src/routes/+page.js\nlet count = 0;\nexport async function load({ depends }) {\n\tdepends('increase:count');\n\n\treturn { count: count++ };\n}\n```\n\n```html\n// @errors: 7031\n/// file: src/routes/+page.svelte\n<script>\n\timport { invalidate } from '$app/navigation';\n\n\texport let data;\n\n\tconst increase = async () => {\n\t\tawait invalidate('increase:count');\n\t}\n</script>\n\n<p>{data.count}<p>\n<button on:click={increase}>Increase Count</button>\n```\n</div></div></div>"
      },
      {
        "name": "Navigation",
        "comment": "",
        "markdown": "<div class=\"ts-block\">\n\n```dts\ninterface Navigation {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\nfrom: NavigationTarget | null;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nWhere navigation was triggered from\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nto: NavigationTarget | null;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nWhere navigation is going to/has gone to\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\ntype: Omit<NavigationType, 'enter'>;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nThe type of navigation:\n- `leave`: The user is leaving the app by closing the tab or using the back/forward buttons to go to a different document\n- `link`: Navigation was triggered by a link click\n- `goto`: Navigation was triggered by a `goto(...)` call or a redirect\n- `popstate`: Navigation was triggered by back/forward navigation\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nwillUnload: boolean;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nWhether or not the navigation will result in the page being unloaded (i.e. not a client-side navigation)\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\ndelta?: number;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nIn case of a history back/forward navigation, the number of steps to go back/forward\n</div></div></div>"
      },
      {
        "name": "NavigationEvent",
        "comment": "",
        "markdown": "<div class=\"ts-block\">\n\n```dts\ninterface NavigationEvent<\n\tParams extends Partial<Record<string, string>> = Partial<\n\t\tRecord<string, string>\n\t>,\n\tRouteId extends string | null = string | null\n> {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\nparams: Params;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nThe parameters of the current page - e.g. for a route like `/blog/[slug]`, a `{ slug: string }` object\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nroute: {/*…*/}\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nInfo about the current route\n\n<div class=\"ts-block-property-children\"><div class=\"ts-block-property\">\n\n```dts\nid: RouteId;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nThe ID of the current route - e.g. for `src/routes/blog/[slug]`, it would be `/blog/[slug]`\n</div></div></div>\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nurl: URL;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nThe URL of the current page\n</div></div></div>"
      },
      {
        "name": "NavigationTarget",
        "comment": "Information about the target of a specific navigation.",
        "markdown": "<div class=\"ts-block\">\n\n```dts\ninterface NavigationTarget {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\nparams: Record<string, string> | null;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nParameters of the target page - e.g. for a route like `/blog/[slug]`, a `{ slug: string }` object.\nIs `null` if the target is not part of the SvelteKit app (could not be resolved to a route).\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nroute: { id: string | null };\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nInfo about the target route\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nurl: URL;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nThe URL that is navigated to\n</div></div></div>"
      },
      {
        "name": "NavigationType",
        "comment": "- `enter`: The app has hydrated\n- `leave`: The user is leaving the app by closing the tab or using the back/forward buttons to go to a different document\n- `link`: Navigation was triggered by a link click\n- `goto`: Navigation was triggered by a `goto(...)` call or a redirect\n- `popstate`: Navigation was triggered by back/forward navigation",
        "markdown": "<div class=\"ts-block\">\n\n```dts\ntype NavigationType = 'enter' | 'leave' | 'link' | 'goto' | 'popstate';\n```\n\n</div>"
      },
      {
        "name": "Page",
        "comment": "The shape of the `$page` store",
        "markdown": "<div class=\"ts-block\">\n\n```dts\ninterface Page<\n\tParams extends Record<string, string> = Record<string, string>,\n\tRouteId extends string | null = string | null\n> {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\nurl: URL;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nThe URL of the current page\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nparams: Params;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nThe parameters of the current page - e.g. for a route like `/blog/[slug]`, a `{ slug: string }` object\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nroute: {/*…*/}\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nInfo about the current route\n\n<div class=\"ts-block-property-children\"><div class=\"ts-block-property\">\n\n```dts\nid: RouteId;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nThe ID of the current route - e.g. for `src/routes/blog/[slug]`, it would be `/blog/[slug]`\n</div></div></div>\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nstatus: number;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nHttp status code of the current page\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nerror: App.Error | null;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nThe error object of the current page, if any. Filled from the `handleError` hooks.\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\ndata: App.PageData & Record<string, any>;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nThe merged result of all data from all `load` functions on the current page. You can type a common denominator through `App.PageData`.\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nform: any;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nFilled only after a form submission. See [form actions](https://kit.svelte.dev/docs/form-actions) for more info.\n</div></div></div>"
      },
      {
        "name": "ParamMatcher",
        "comment": "The shape of a param matcher. See [matching](https://kit.svelte.dev/docs/advanced-routing#matching) for more info.",
        "markdown": "<div class=\"ts-block\">\n\n```dts\ninterface ParamMatcher {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\n(param: string): boolean;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div></div>"
      },
      {
        "name": "Redirect",
        "comment": "The object returned by the [`redirect`](https://kit.svelte.dev/docs/modules#sveltejs-kit-redirect) function",
        "markdown": "<div class=\"ts-block\">\n\n```dts\ninterface Redirect {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\nstatus: 300 | 301 | 302 | 303 | 304 | 305 | 306 | 307 | 308;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nThe [HTTP status code](https://httpstatusdogs.com), in the range 300-308.\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nlocation: string;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nThe location to redirect to.\n</div></div></div>"
      },
      {
        "name": "RequestEvent",
        "comment": "",
        "markdown": "<div class=\"ts-block\">\n\n```dts\ninterface RequestEvent<\n\tParams extends Partial<Record<string, string>> = Partial<\n\t\tRecord<string, string>\n\t>,\n\tRouteId extends string | null = string | null\n> {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\ncookies: Cookies;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nGet or set cookies related to the current request\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nfetch: typeof fetch;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n`fetch` is equivalent to the [native `fetch` web API](https://developer.mozilla.org/en-US/docs/Web/API/fetch), with a few additional features:\n\n- it can be used to make credentialed requests on the server, as it inherits the `cookie` and `authorization` headers for the page request\n- it can make relative requests on the server (ordinarily, `fetch` requires a URL with an origin when used in a server context)\n- internal requests (e.g. for `+server.js` routes) go directly to the handler function when running on the server, without the overhead of an HTTP call\n\n> Cookies will only be passed through if the target host is the same as the SvelteKit application or a more specific subdomain of it.\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\ngetClientAddress(): string;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nThe client's IP address, set by the adapter.\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nlocals: App.Locals;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nContains custom data that was added to the request within the [`handle hook`](https://kit.svelte.dev/docs/hooks#server-hooks-handle).\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nparams: Params;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nThe parameters of the current page or endpoint - e.g. for a route like `/blog/[slug]`, a `{ slug: string }` object\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nplatform: Readonly<App.Platform>;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nAdditional data made available through the adapter.\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nrequest: Request;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nThe original request object\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nroute: {/*…*/}\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nInfo about the current route\n\n<div class=\"ts-block-property-children\"><div class=\"ts-block-property\">\n\n```dts\nid: RouteId;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nThe ID of the current route - e.g. for `src/routes/blog/[slug]`, it would be `/blog/[slug]`\n</div></div></div>\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nsetHeaders(headers: Record<string, string>): void;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nIf you need to set headers for the response, you can do so using the this method. This is useful if you want the page to be cached, for example:\n\n```js\n// @errors: 7031\n/// file: src/routes/blog/+page.js\nexport async function load({ fetch, setHeaders }) {\n\tconst url = `https://cms.example.com/articles.json`;\n\tconst response = await fetch(url);\n\n\tsetHeaders({\n\t\tage: response.headers.get('age'),\n\t\t'cache-control': response.headers.get('cache-control')\n\t});\n\n\treturn response.json();\n}\n```\n\nSetting the same header multiple times (even in separate `load` functions) is an error — you can only set a given header once.\n\nYou cannot add a `set-cookie` header with `setHeaders` — use the [`cookies`](https://kit.svelte.dev/docs/types#sveltejs-kit-cookies) API instead.\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nurl: URL;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nThe URL of the current page or endpoint\n</div></div></div>"
      },
      {
        "name": "RequestHandler",
        "comment": "A `(event: RequestEvent) => Response` function exported from a `+server.js` file that corresponds to an HTTP verb (`GET`, `PUT`, `PATCH`, etc) and handles requests with that method.\n\nIt receives `Params` as the first generic argument, which you can skip by using [generated types](https://kit.svelte.dev/docs/types#generated-types) instead.",
        "markdown": "<div class=\"ts-block\">\n\n```dts\ninterface RequestHandler<\n\tParams extends Partial<Record<string, string>> = Partial<\n\t\tRecord<string, string>\n\t>,\n\tRouteId extends string | null = string | null\n> {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\n(event: RequestEvent<Params, RouteId>): MaybePromise<Response>;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div></div>"
      },
      {
        "name": "ResolveOptions",
        "comment": "",
        "markdown": "<div class=\"ts-block\">\n\n```dts\ninterface ResolveOptions {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\ntransformPageChunk?(input: { html: string; done: boolean }): MaybePromise<string | undefined>;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n<div class=\"ts-block-property-bullets\">\n\n- `input` the html chunk and the info if this is the last chunk</div>\n\nApplies custom transforms to HTML. If `done` is true, it's the final chunk. Chunks are not guaranteed to be well-formed HTML\n(they could include an element's opening tag but not its closing tag, for example)\nbut they will always be split at sensible boundaries such as `%sveltekit.head%` or layout/page components.\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nfilterSerializedResponseHeaders?(name: string, value: string): boolean;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n<div class=\"ts-block-property-bullets\">\n\n- `name` header name\n- `value` header value</div>\n\nDetermines which headers should be included in serialized responses when a `load` function loads a resource with `fetch`.\nBy default, none will be included.\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\npreload?(input: { type: 'font' | 'css' | 'js' | 'asset'; path: string }): boolean;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n<div class=\"ts-block-property-bullets\">\n\n- `input` the type of the file and its path</div>\n\nDetermines what should be added to the `<head>` tag to preload it.\nBy default, `js`, `css` and `font` files will be preloaded.\n</div></div></div>"
      },
      {
        "name": "SSRManifest",
        "comment": "",
        "markdown": "<div class=\"ts-block\">\n\n```dts\ninterface SSRManifest {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\nappDir: string;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nappPath: string;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nassets: Set<string>;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nmimeTypes: Record<string, string>;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\n_: {\n\tentry: {\n\t\tfile: string;\n\t\timports: string[];\n\t\tstylesheets: string[];\n\t\tfonts: string[];\n\t};\n\tnodes: SSRNodeLoader[];\n\troutes: SSRRoute[];\n\tmatchers(): Promise<Record<string, ParamMatcher>>;\n};\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nprivate fields\n</div></div></div>"
      },
      {
        "name": "Server",
        "comment": "",
        "markdown": "<div class=\"ts-block\">\n\n```dts\nclass Server {\n\tconstructor(manifest: SSRManifest);\n\tinit(options: ServerInitOptions): Promise<void>;\n\trespond(request: Request, options: RequestOptions): Promise<Response>;\n}\n```\n\n</div>"
      },
      {
        "name": "ServerInitOptions",
        "comment": "",
        "markdown": "<div class=\"ts-block\">\n\n```dts\ninterface ServerInitOptions {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\nenv: Record<string, string>;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div></div>"
      },
      {
        "name": "ServerLoad",
        "comment": "The generic form of `PageServerLoad` and `LayoutServerLoad`. You should import those from `./$types` (see [generated types](https://kit.svelte.dev/docs/types#generated-types))\nrather than using `ServerLoad` directly.",
        "markdown": "<div class=\"ts-block\">\n\n```dts\ninterface ServerLoad<\n\tParams extends Partial<Record<string, string>> = Partial<\n\t\tRecord<string, string>\n\t>,\n\tParentData extends Record<string, any> = Record<string, any>,\n\tOutputData extends Record<string, any> | void = Record<string, any> | void,\n\tRouteId extends string | null = string | null\n> {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\n(event: ServerLoadEvent<Params, ParentData, RouteId>): MaybePromise<OutputData>;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div></div>"
      },
      {
        "name": "ServerLoadEvent",
        "comment": "",
        "markdown": "<div class=\"ts-block\">\n\n```dts\ninterface ServerLoadEvent<\n\tParams extends Partial<Record<string, string>> = Partial<\n\t\tRecord<string, string>\n\t>,\n\tParentData extends Record<string, any> = Record<string, any>,\n\tRouteId extends string | null = string | null\n> extends RequestEvent<Params, RouteId> {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\nparent(): Promise<ParentData>;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n`await parent()` returns data from parent `+layout.server.js` `load` functions.\n\nBe careful not to introduce accidental waterfalls when using `await parent()`. If for example you only want to merge parent data into the returned output, call it _after_ fetching your other data.\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\ndepends(...deps: string[]): void;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nThis function declares that the `load` function has a _dependency_ on one or more URLs or custom identifiers, which can subsequently be used with [`invalidate()`](/docs/modules#$app-navigation-invalidate) to cause `load` to rerun.\n\nMost of the time you won't need this, as `fetch` calls `depends` on your behalf — it's only necessary if you're using a custom API client that bypasses `fetch`.\n\nURLs can be absolute or relative to the page being loaded, and must be [encoded](https://developer.mozilla.org/en-US/docs/Glossary/percent-encoding).\n\nCustom identifiers have to be prefixed with one or more lowercase letters followed by a colon to conform to the [URI specification](https://www.rfc-editor.org/rfc/rfc3986.html).\n\nThe following example shows how to use `depends` to register a dependency on a custom identifier, which is `invalidate`d after a button click, making the `load` function rerun.\n\n```js\n// @errors: 7031\n/// file: src/routes/+page.js\nlet count = 0;\nexport async function load({ depends }) {\n\tdepends('increase:count');\n\n\treturn { count: count++ };\n}\n```\n\n```html\n// @errors: 7031\n/// file: src/routes/+page.svelte\n<script>\n\timport { invalidate } from '$app/navigation';\n\n\texport let data;\n\n\tconst increase = async () => {\n\t\tawait invalidate('increase:count');\n\t}\n</script>\n\n<p>{data.count}<p>\n<button on:click={increase}>Increase Count</button>\n```\n</div></div></div>"
      },
      {
        "name": "SubmitFunction",
        "comment": "",
        "markdown": "<div class=\"ts-block\">\n\n```dts\ninterface SubmitFunction<\n\tSuccess extends Record<string, unknown> | undefined = Record<string, any>,\n\tInvalid extends Record<string, unknown> | undefined = Record<string, any>\n> {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\n(input: {\n\taction: URL;\n\tdata: FormData;\n\tform: HTMLFormElement;\n\tcontroller: AbortController;\n\tcancel(): void;\n}): MaybePromise<\n\t| void\n\t| ((opts: {\n\t\t\tform: HTMLFormElement;\n\t\t\taction: URL;\n\t\t\tresult: ActionResult<Success, Invalid>;\n\t\t\t/**\n\t\t\t * Call this to get the default behavior of a form submission response.\n\t\t\t * @param options Set `reset: false` if you don't want the `<form>` values to be reset after a successful submission.\n\t\t\t */\n\t\t\tupdate(options?: { reset: boolean }): Promise<void>;\n\t  }) => void)\n>;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div></div>"
      },
      {
        "name": "ValidationError",
        "comment": "The object returned by the [`invalid`](https://kit.svelte.dev/docs/modules#sveltejs-kit-invalid) function",
        "markdown": "<div class=\"ts-block\">\n\n```dts\ninterface ValidationError<\n\tT extends Record<string, unknown> | undefined = undefined\n> extends UniqueInterface {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\nstatus: number;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\ndata: T;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div></div>"
      }
    ],
    "exports": [
      {
        "name": "error",
        "comment": "Creates an `HttpError` object with an HTTP status code and an optional message.\nThis object, if thrown during request handling, will cause SvelteKit to\nreturn an error response without invoking `handleError`",
        "markdown": "<div class=\"ts-block\">\n\n```dts\nfunction error(status: number, body: App.Error): HttpError;\n```\n\n</div>"
      },
      {
        "name": "error",
        "comment": "",
        "markdown": "<div class=\"ts-block\">\n\n```dts\nfunction error(\n\tstatus: number,\n\t// this overload ensures you can omit the argument or pass in a string if App.Error is of type { message: string }\n\tbody?: { message: string } extends App.Error\n\t\t? App.Error | string | undefined\n\t\t: never\n): HttpError;\n```\n\n</div>"
      },
      {
        "name": "invalid",
        "comment": "Create a `ValidationError` object.",
        "markdown": "<div class=\"ts-block\">\n\n```dts\nfunction invalid<T extends Record<string, unknown> | undefined>(\n\tstatus: number,\n\tdata?: T\n): ValidationError<T>;\n```\n\n</div>"
      },
      {
        "name": "json",
        "comment": "Create a JSON `Response` object from the supplied data.",
        "markdown": "<div class=\"ts-block\">\n\n```dts\nfunction json(data: any, init?: ResponseInit): Response;\n```\n\n</div>"
      },
      {
        "name": "redirect",
        "comment": "Create a `Redirect` object. If thrown during request handling, SvelteKit will\nreturn a redirect response.",
        "markdown": "<div class=\"ts-block\">\n\n```dts\nfunction redirect(\n\tstatus: 300 | 301 | 302 | 303 | 304 | 305 | 306 | 307 | 308,\n\tlocation: string\n): Redirect;\n```\n\n</div>"
      }
    ]
  },
  {
    "name": "@sveltejs/kit/hooks",
    "comment": "",
    "types": [],
    "exports": [
      {
        "name": "sequence",
        "comment": "A helper function for sequencing multiple `handle` calls in a middleware-like manner.\n\n```js\n// @errors: 7031\n/// file: src/hooks.server.js\nimport { sequence } from '@sveltejs/kit/hooks';\n\nasync function first({ event, resolve }) {\n\tconsole.log('first pre-processing');\n\tconst result = await resolve(event, {\n\t\ttransformPageChunk: ({ html }) => {\n\t\t\t// transforms are applied in reverse order\n\t\t\tconsole.log('first transform');\n\t\t\treturn html;\n\t\t}\n\t});\n\tconsole.log('first post-processing');\n\treturn result;\n}\n\nasync function second({ event, resolve }) {\n\tconsole.log('second pre-processing');\n\tconst result = await resolve(event, {\n\t\ttransformPageChunk: ({ html }) => {\n\t\t\tconsole.log('second transform');\n\t\t\treturn html;\n\t\t}\n\t});\n\tconsole.log('second post-processing');\n\treturn result;\n}\n\nexport const handle = sequence(first, second);\n```\n\nThe example above would print:\n\n```\nfirst pre-processing\nsecond pre-processing\nsecond transform\nfirst transform\nsecond post-processing\nfirst post-processing\n```",
        "markdown": "<div class=\"ts-block\">\n\n```dts\nfunction sequence(...handlers: Handle[]): Handle;\n```\n\n</div>"
      }
    ]
  },
  {
    "name": "@sveltejs/kit/node",
    "comment": "Utilities used by adapters for Node-like environments.",
    "types": [],
    "exports": [
      {
        "name": "getRequest",
        "comment": "",
        "markdown": "<div class=\"ts-block\">\n\n```dts\nfunction getRequest(opts: {\n\tbase: string;\n\trequest: import('http').IncomingMessage;\n\tbodySizeLimit?: number;\n}): Promise<Request>;\n```\n\n</div>"
      },
      {
        "name": "setResponse",
        "comment": "",
        "markdown": "<div class=\"ts-block\">\n\n```dts\nfunction setResponse(\n\tres: import('http').ServerResponse,\n\tresponse: Response\n): void;\n```\n\n</div>"
      }
    ]
  },
  {
    "name": "@sveltejs/kit/node/polyfills",
    "comment": "A polyfill for `fetch` and its related interfaces, used by adapters for environments that don't provide a native implementation.",
    "types": [],
    "exports": [
      {
        "name": "installPolyfills",
        "comment": "Make various web APIs available as globals:\n- `crypto`\n- `fetch`\n- `Headers`\n- `Request`\n- `Response`",
        "markdown": "<div class=\"ts-block\">\n\n```dts\nfunction installPolyfills(): void;\n```\n\n</div>"
      }
    ]
  },
  {
    "name": "@sveltejs/kit/vite",
    "comment": "",
    "types": [],
    "exports": [
      {
        "name": "sveltekit",
        "comment": "Returns the SvelteKit Vite plugins.",
        "markdown": "<div class=\"ts-block\">\n\n```dts\nfunction sveltekit(): Plugin[];\n```\n\n</div>"
      }
    ]
  },
  {
    "name": "Additional types",
    "comment": "The following are referenced by the public types documented above, but cannot be imported directly:",
    "types": [
      {
        "name": "AdapterEntry",
        "comment": "",
        "markdown": "<div class=\"ts-block\">\n\n```dts\ninterface AdapterEntry {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\nid: string;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nA string that uniquely identifies an HTTP service (e.g. serverless function) and is used for deduplication.\nFor example, `/foo/a-[b]` and `/foo/[c]` are different routes, but would both\nbe represented in a Netlify _redirects file as `/foo/:param`, so they share an ID\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nfilter(route: RouteDefinition): boolean;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nA function that compares the candidate route with the current route to determine\nif it should be treated as a fallback for the current route. For example, `/foo/[c]`\nis a fallback for `/foo/a-[b]`, and `/[...catchall]` is a fallback for all routes\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\ncomplete(entry: { generateManifest(opts: { relativePath: string }): string }): MaybePromise<void>;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nA function that is invoked once the entry has been created. This is where you\nshould write the function to the filesystem and generate redirect manifests.\n</div></div></div>"
      },
      {
        "name": "Csp",
        "comment": "",
        "markdown": "<div class=\"ts-block\">\n\n```dts\nnamespace Csp {\n\ttype ActionSource = 'strict-dynamic' | 'report-sample';\n\ttype BaseSource =\n\t\t| 'self'\n\t\t| 'unsafe-eval'\n\t\t| 'unsafe-hashes'\n\t\t| 'unsafe-inline'\n\t\t| 'wasm-unsafe-eval'\n\t\t| 'none';\n\ttype CryptoSource = `${'nonce' | 'sha256' | 'sha384' | 'sha512'}-${string}`;\n\ttype FrameSource = HostSource | SchemeSource | 'self' | 'none';\n\ttype HostNameScheme = `${string}.${string}` | 'localhost';\n\ttype HostSource = `${HostProtocolSchemes}${HostNameScheme}${PortScheme}`;\n\ttype HostProtocolSchemes = `${string}://` | '';\n\ttype HttpDelineator = '/' | '?' | '#' | '\\\\';\n\ttype PortScheme = `:${number}` | '' | ':*';\n\ttype SchemeSource =\n\t\t| 'http:'\n\t\t| 'https:'\n\t\t| 'data:'\n\t\t| 'mediastream:'\n\t\t| 'blob:'\n\t\t| 'filesystem:';\n\ttype Source = HostSource | SchemeSource | CryptoSource | BaseSource;\n\ttype Sources = Source[];\n\ttype UriPath = `${HttpDelineator}${string}`;\n}\n```\n\n</div>"
      },
      {
        "name": "CspDirectives",
        "comment": "",
        "markdown": "<div class=\"ts-block\">\n\n```dts\ninterface CspDirectives {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\n'child-src'?: Csp.Sources;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\n'default-src'?: Array<Csp.Source | Csp.ActionSource>;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\n'frame-src'?: Csp.Sources;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\n'worker-src'?: Csp.Sources;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\n'connect-src'?: Csp.Sources;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\n'font-src'?: Csp.Sources;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\n'img-src'?: Csp.Sources;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\n'manifest-src'?: Csp.Sources;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\n'media-src'?: Csp.Sources;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\n'object-src'?: Csp.Sources;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\n'prefetch-src'?: Csp.Sources;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\n'script-src'?: Array<Csp.Source | Csp.ActionSource>;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\n'script-src-elem'?: Csp.Sources;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\n'script-src-attr'?: Csp.Sources;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\n'style-src'?: Array<Csp.Source | Csp.ActionSource>;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\n'style-src-elem'?: Csp.Sources;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\n'style-src-attr'?: Csp.Sources;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\n'base-uri'?: Array<Csp.Source | Csp.ActionSource>;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nsandbox?: Array<\n\t| 'allow-downloads-without-user-activation'\n\t| 'allow-forms'\n\t| 'allow-modals'\n\t| 'allow-orientation-lock'\n\t| 'allow-pointer-lock'\n\t| 'allow-popups'\n\t| 'allow-popups-to-escape-sandbox'\n\t| 'allow-presentation'\n\t| 'allow-same-origin'\n\t| 'allow-scripts'\n\t| 'allow-storage-access-by-user-activation'\n\t| 'allow-top-navigation'\n\t| 'allow-top-navigation-by-user-activation'\n>;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\n'form-action'?: Array<Csp.Source | Csp.ActionSource>;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\n'frame-ancestors'?: Array<Csp.HostSource | Csp.SchemeSource | Csp.FrameSource>;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\n'navigate-to'?: Array<Csp.Source | Csp.ActionSource>;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\n'report-uri'?: Csp.UriPath[];\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\n'report-to'?: string[];\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\n'require-trusted-types-for'?: Array<'script'>;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\n'trusted-types'?: Array<'none' | 'allow-duplicates' | '*' | string>;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\n'upgrade-insecure-requests'?: boolean;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\n'require-sri-for'?: Array<'script' | 'style' | 'script style'>;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\n'block-all-mixed-content'?: boolean;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\n'plugin-types'?: Array<`${string}/${string}` | 'none'>;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nreferrer?: Array<\n\t| 'no-referrer'\n\t| 'no-referrer-when-downgrade'\n\t| 'origin'\n\t| 'origin-when-cross-origin'\n\t| 'same-origin'\n\t| 'strict-origin'\n\t| 'strict-origin-when-cross-origin'\n\t| 'unsafe-url'\n\t| 'none'\n>;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div></div>"
      },
      {
        "name": "HttpMethod",
        "comment": "",
        "markdown": "<div class=\"ts-block\">\n\n```dts\ntype HttpMethod = 'GET' | 'HEAD' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';\n```\n\n</div>"
      },
      {
        "name": "Logger",
        "comment": "",
        "markdown": "<div class=\"ts-block\">\n\n```dts\ninterface Logger {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\n(msg: string): void;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nsuccess(msg: string): void;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nerror(msg: string): void;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nwarn(msg: string): void;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nminor(msg: string): void;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\ninfo(msg: string): void;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div></div>"
      },
      {
        "name": "MaybePromise",
        "comment": "",
        "markdown": "<div class=\"ts-block\">\n\n```dts\ntype MaybePromise<T> = T | Promise<T>;\n```\n\n</div>"
      },
      {
        "name": "PrerenderHttpErrorHandler",
        "comment": "",
        "markdown": "<div class=\"ts-block\">\n\n```dts\ninterface PrerenderHttpErrorHandler {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\n(details: {\n\tstatus: number;\n\tpath: string;\n\treferrer: string | null;\n\treferenceType: 'linked' | 'fetched';\n}): void;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div></div>"
      },
      {
        "name": "PrerenderHttpErrorHandlerValue",
        "comment": "",
        "markdown": "<div class=\"ts-block\">\n\n```dts\ntype PrerenderHttpErrorHandlerValue =\n\t| 'fail'\n\t| 'warn'\n\t| 'ignore'\n\t| PrerenderHttpErrorHandler;\n```\n\n</div>"
      },
      {
        "name": "PrerenderMap",
        "comment": "",
        "markdown": "<div class=\"ts-block\">\n\n```dts\ntype PrerenderMap = Map<string, PrerenderOption>;\n```\n\n</div>"
      },
      {
        "name": "PrerenderMissingIdHandler",
        "comment": "",
        "markdown": "<div class=\"ts-block\">\n\n```dts\ninterface PrerenderMissingIdHandler {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\n(details: { path: string; id: string; referrers: string[] }): void;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div></div>"
      },
      {
        "name": "PrerenderMissingIdHandlerValue",
        "comment": "",
        "markdown": "<div class=\"ts-block\">\n\n```dts\ntype PrerenderMissingIdHandlerValue =\n\t| 'fail'\n\t| 'warn'\n\t| 'ignore'\n\t| PrerenderMissingIdHandler;\n```\n\n</div>"
      },
      {
        "name": "PrerenderOption",
        "comment": "",
        "markdown": "<div class=\"ts-block\">\n\n```dts\ntype PrerenderOption = boolean | 'auto';\n```\n\n</div>"
      },
      {
        "name": "Prerendered",
        "comment": "",
        "markdown": "<div class=\"ts-block\">\n\n```dts\ninterface Prerendered {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\npages: Map<\n\tstring,\n\t{\n\t\t/** The location of the .html file relative to the output directory */\n\t\tfile: string;\n\t}\n>;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nA map of `path` to `{ file }` objects, where a path like `/foo` corresponds to `foo.html` and a path like `/bar/` corresponds to `bar/index.html`.\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nassets: Map<\n\tstring,\n\t{\n\t\t/** The MIME type of the asset */\n\t\ttype: string;\n\t}\n>;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nA map of `path` to `{ type }` objects.\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nredirects: Map<\n\tstring,\n\t{\n\t\tstatus: number;\n\t\tlocation: string;\n\t}\n>;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nA map of redirects encountered during prerendering.\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\npaths: string[];\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\nAn array of prerendered paths (without trailing slashes, regardless of the trailingSlash config)\n</div></div></div>"
      },
      {
        "name": "RequestOptions",
        "comment": "",
        "markdown": "<div class=\"ts-block\">\n\n```dts\ninterface RequestOptions {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\ngetClientAddress(): string;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nplatform?: App.Platform;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div></div>"
      },
      {
        "name": "RouteDefinition",
        "comment": "",
        "markdown": "<div class=\"ts-block\">\n\n```dts\ninterface RouteDefinition {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\nid: string;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\npattern: RegExp;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nsegments: RouteSegment[];\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nmethods: HttpMethod[];\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div></div>"
      },
      {
        "name": "RouteSegment",
        "comment": "",
        "markdown": "<div class=\"ts-block\">\n\n```dts\ninterface RouteSegment {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\ncontent: string;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\ndynamic: boolean;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div>\n\n<div class=\"ts-block-property\">\n\n```dts\nrest: boolean;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div></div>"
      },
      {
        "name": "TrailingSlash",
        "comment": "",
        "markdown": "<div class=\"ts-block\">\n\n```dts\ntype TrailingSlash = 'never' | 'always' | 'ignore';\n```\n\n</div>"
      },
      {
        "name": "UniqueInterface",
        "comment": "",
        "markdown": "<div class=\"ts-block\">\n\n```dts\ninterface UniqueInterface {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\nreadonly [uniqueSymbol]: unknown;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div></div>"
      }
    ],
    "exports": []
  },
  {
    "name": "App",
    "comment": "It's possible to tell SvelteKit how to type objects inside your app by declaring the `App` namespace. By default, a new project will have a file called `src/app.d.ts` containing the following:\n\n```ts\n/// <reference types=\"@sveltejs/kit\" />\n\ndeclare namespace App {\n\tinterface Error {}\n\tinterface Locals {}\n\tinterface PageData {}\n\tinterface Platform {}\n}\n```\n\nBy populating these interfaces, you will gain type safety when using `event.locals`, `event.platform`, and `data` from `load` functions.\n\nNote that since it's an ambient declaration file, you have to be careful when using `import` statements. Once you add an `import`\nat the top level, the declaration file is no longer considered ambient and you lose access to these typings in other files.\nTo avoid this, either use the `import(...)` function:\n\n```ts\ninterface Locals {\n\tuser: import('$lib/types').User;\n}\n```\nOr wrap the namespace with `declare global`:\n```ts\nimport { User } from '$lib/types';\n\ndeclare global {\n\tnamespace App {\n\t\tinterface Locals {\n\t\t\tuser: User;\n\t\t}\n\t\t// ...\n\t}\n}\n```",
    "types": [
      {
        "name": "Error",
        "comment": "Defines the common shape of expected and unexpected errors. Expected errors are thrown using the `error` function. Unexpected errors are handled by the `handleError` hooks which should return this shape.",
        "markdown": "<div class=\"ts-block\">\n\n```dts\ninterface Error {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\nmessage: string;\n```\n\n<div class=\"ts-block-property-details\">\n\n\n\n\n</div></div></div>"
      },
      {
        "name": "Locals",
        "comment": "The interface that defines `event.locals`, which can be accessed in [hooks](https://kit.svelte.dev/docs/hooks) (`handle`, and `handleError`), server-only `load` functions, and `+server.js` files.",
        "markdown": "<div class=\"ts-block\">\n\n```dts\ninterface Locals {}\n```\n\n</div>"
      },
      {
        "name": "PageData",
        "comment": "Defines the common shape of the [$page.data store](https://kit.svelte.dev/docs/modules#$app-stores-page) - that is, the data that is shared between all pages.\nThe `Load` and `ServerLoad` functions in `./$types` will be narrowed accordingly.\nUse optional properties for data that is only present on specific pages. Do not add an index signature (`[key: string]: any`).",
        "markdown": "<div class=\"ts-block\">\n\n```dts\ninterface PageData {}\n```\n\n</div>"
      },
      {
        "name": "Platform",
        "comment": "If your adapter provides [platform-specific context](https://kit.svelte.dev/docs/adapters#supported-environments-platform-specific-context) via `event.platform`, you can specify it here.",
        "markdown": "<div class=\"ts-block\">\n\n```dts\ninterface Platform {}\n```\n\n</div>"
      }
    ],
    "exports": []
  }
];