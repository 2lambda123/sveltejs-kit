/**
 * Decides how the body should be parsed based on its mime type.
 *
 * This is intended to be used with both requests and responses, to have a consistent body parsing across adapters.
 *
 * @param {string} content_type The `content-type` header of a request/response.
 * @returns {boolean}
 */
export function isContentTypeBinary(content_type) {
	return (
		content_type.startsWith('image/') ||
		content_type.startsWith('audio/') ||
		content_type.startsWith('video/') ||
		content_type.startsWith('application/octet-stream')
	);
}

/** Adds glob patterns to the project's `.gitignore`
 * @param {object} options
 * @param {string[]} options.patterns An array of glob patterns to be inserted into the project's `.gitignore` file
 * @param {boolean} [options.generate] Whether the `.gitignore` file should be created if it doesn't exist
 * @param {string} options.name The name of the adapter
 */
export async function updateGitIgnore({ patterns, generate = false, name }) {
	const path = '.gitignore';
	const { existsSync } = await import('fs');
	const { readFile, writeFile, appendFile } = await import('fs/promises');
	if (!existsSync(path)) {
		if (!generate) return;
		await writeFile(path, '');
	}
	const file = await readFile(path, {
		encoding: 'utf-8'
	});
	if (file.includes(`# Generated by ${name}`)) return;
	const text = `\n# Generated by ${name}\n${patterns.join('\n')}`;
	await appendFile(path, text);
}
