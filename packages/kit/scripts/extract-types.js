import fs from 'fs';
import ts from 'typescript';
import prettier from 'prettier';

/** @typedef {{ name: string, comment: string, snippet: string }} Extracted */

/** @type {Extracted[]} */
let types;

/** @type {Record<string, Extracted[]>} */
const modules = {};

/**
 * @param {string} code
 * @param {ts.NodeArray<ts.Statement>} statements
 */
function get_types(code, statements) {
	const types = [];

	for (const statement of statements) {
		if (
			ts.isClassDeclaration(statement) ||
			ts.isInterfaceDeclaration(statement) ||
			ts.isTypeAliasDeclaration(statement) ||
			ts.isModuleDeclaration(statement) ||
			ts.isVariableStatement(statement) ||
			ts.isFunctionDeclaration(statement)
		) {
			const name_node = ts.isVariableStatement(statement)
				? statement.declarationList.declarations[0]
				: statement;

			// @ts-ignore no idea why it's complaining here
			const name = name_node.name?.escapedText;

			let start = statement.pos;
			let comment = '';

			// @ts-ignore i think typescript is bad at typescript
			if (statement.jsDoc) {
				// @ts-ignore
				comment = statement.jsDoc[0].comment;
				// @ts-ignore
				start = statement.jsDoc[0].end;
			}

			const i = code.indexOf('export', start);
			start = i + 6;

			const snippet = prettier.format(code.slice(start, statement.end).trim(), {
				parser: 'typescript',
				printWidth: 60,
				useTabs: true,
				singleQuote: true,
				trailingComma: 'none'
			});

			types.push({ name, comment, snippet });
		} else {
			// console.log(statement.kind);
		}
	}

	return types;
}

{
	const code = fs.readFileSync('types/index.d.ts', 'utf-8');
	const node = ts.createSourceFile('index.d.ts', code, ts.ScriptTarget.Latest);
	types = get_types(code, node.statements);
}

{
	const code = fs.readFileSync('types/ambient.d.ts', 'utf-8');
	const node = ts.createSourceFile('ambient.d.ts', code, ts.ScriptTarget.Latest);

	for (const statement of node.statements) {
		if (ts.isModuleDeclaration(statement)) {
			const name = statement.name.text || statement.name.escapedText;
			modules[name] = get_types(code, statement.body.statements);
		}
	}
}

// should already be sorted, but just in case
types.sort((a, b) => (a.name < b.name ? -1 : 1));

fs.writeFileSync(
	'../../documentation/types.js',
	`
/* This file is generated by running \`node scripts/extract-types.js\`
   in the packages/kit directory â€” do not edit it */
export const types = ${JSON.stringify(types, null, '  ')};

export const modules = ${JSON.stringify(modules, null, '  ')};
`.trim()
);
